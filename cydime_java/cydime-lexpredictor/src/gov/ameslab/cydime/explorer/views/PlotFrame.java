/*
 * Copyright (c) 2014 Iowa State University
 * All rights reserved.
 * 
 * Copyright 2014.  Iowa State University.  This software was produced under U.S.
 * Government contract DE-AC02-07CH11358 for The Ames Laboratory, which is 
 * operated by Iowa State University for the U.S. Department of Energy.  The U.S.
 * Government has the rights to use, reproduce, and distribute this software.
 * NEITHER THE GOVERNMENT NOR IOWA STATE UNIVERSITY MAKES ANY WARRANTY, EXPRESS
 * OR IMPLIED, OR ASSUMES ANY LIABILITY FOR THE USE OF THIS SOFTWARE.  If 
 * software is modified to produce derivative works, such modified software 
 * should be clearly marked, so as not to confuse it with the version available
 * from The Ames Laboratory.  Additionally, redistribution and use in source and
 * binary forms, with or without modification, are permitted provided that the 
 * following conditions are met:
 * 
 * 1.  Redistribution of source code must retain the above copyright notice, this
 * list of conditions, and the following disclaimer.
 * 2.  Redistribution in binary form must reproduce the above copyright notice, 
 * this list of conditions, and the following disclaimer in the documentation 
 * and/or other materials provided with distribution.
 * 3.  Neither the name of Iowa State University, The Ames Laboratory, the
 * U.S. Government, nor the names of its contributors may be used to endorse or
 * promote products derived from this software without specific prior written
 * permission
 * 
 * THIS SOFTWARE IS PROVIDED BY IOWA STATE UNIVERSITY AND CONTRIBUTORS "AS IS",
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL IOWA STATE UNIVERSITY OF CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITRY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE. 
 */

package gov.ameslab.cydime.explorer.views;

import java.awt.RenderingHints;
import java.util.List;

import javax.swing.JTree;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;

import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.NumberAxis;

import gov.ameslab.cydime.explorer.models.PlotData;
import gov.ameslab.cydime.explorer.views.Selectable.SelectionListener;
import gov.ameslab.cydime.util.CUtil;
import gov.ameslab.cydime.util.models.TreeNode;

/**
 * MVC View for the zoomable scatter plot with three selection trees for filtering (Service, Hostname hierarchy, and Whois hierarchy).
 *
 * @author Harris Lin (harris.lin.nz at gmail.com)
 */
public class PlotFrame extends javax.swing.JFrame implements SelectionListener {
	
	public interface DataSelectionListener {
		
		public void selectData(List<String> data);
		
	}

	private DataSelectionListener mDataSelectionListener;
	private FastScatterPlot mPlot;
	private List<String> mCurrentIPs;
	private float[][] mCurrentRecords;
    
	/**
	 * Creates new form Frame
	 */
	public PlotFrame() {
		initComponents();
		initTrees();
		initPlot();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel6 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        lblTotal = new javax.swing.JLabel();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 32767));
        jLabel6 = new javax.swing.JLabel();
        lblUnlabeled = new javax.swing.JLabel();
        filler3 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 32767));
        jLabel3 = new javax.swing.JLabel();
        lbl1 = new javax.swing.JLabel();
        filler4 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 32767));
        jLabel4 = new javax.swing.JLabel();
        lbl0 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        treService = new javax.swing.JTree();
        jPanel11 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        treDomain = new javax.swing.JTree();
        jPanel12 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        treWhois = new javax.swing.JTree();
        jPanel13 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel18 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel16 = new javax.swing.JPanel();
        cmbYAxis = new javax.swing.JComboBox<String>();
        jPanel17 = new javax.swing.JPanel();
        cmbXAxis = new javax.swing.JComboBox<String>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("DWL Explorer");
        setPreferredSize(new java.awt.Dimension(800, 1000));
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.PAGE_AXIS));

        jLabel8.setText("Total:");
        jPanel6.add(jLabel8);

        lblTotal.setText("0");
        jPanel6.add(lblTotal);
        jPanel6.add(filler1);

        jLabel6.setText("Unlabeled:");
        jPanel6.add(jLabel6);

        lblUnlabeled.setText("0");
        jPanel6.add(lblUnlabeled);
        jPanel6.add(filler3);

        jLabel3.setText("Notify (1):");
        jPanel6.add(jLabel3);

        lbl1.setText("0");
        jPanel6.add(lbl1);
        jPanel6.add(filler4);

        jLabel4.setText("Auto-respond (0):");
        jPanel6.add(jLabel4);

        lbl0.setText("0");
        jPanel6.add(lbl0);

        getContentPane().add(jPanel6);

        jPanel2.setPreferredSize(new java.awt.Dimension(800, 200));
        jPanel2.setLayout(new java.awt.GridLayout(1, 4));

        jPanel10.setLayout(new java.awt.BorderLayout());

        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel13.setText("Top Service");
        jPanel10.add(jLabel13, java.awt.BorderLayout.PAGE_START);

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        treService.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jScrollPane3.setViewportView(treService);

        jPanel10.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        jPanel11.setLayout(new java.awt.GridLayout(1, 2));
        jPanel10.add(jPanel11, java.awt.BorderLayout.PAGE_END);

        jPanel2.add(jPanel10);

        jPanel5.setLayout(new java.awt.BorderLayout());

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("Domain Hierarchy");
        jPanel5.add(jLabel9, java.awt.BorderLayout.PAGE_START);

        treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        treDomain.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jScrollPane5.setViewportView(treDomain);

        jPanel5.add(jScrollPane5, java.awt.BorderLayout.CENTER);

        jPanel12.setLayout(new java.awt.GridLayout(1, 2));
        jPanel5.add(jPanel12, java.awt.BorderLayout.PAGE_END);

        jPanel2.add(jPanel5);

        jPanel7.setLayout(new java.awt.BorderLayout());

        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("Whois Hierarchy");
        jPanel7.add(jLabel10, java.awt.BorderLayout.PAGE_START);

        treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        treWhois.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jScrollPane6.setViewportView(treWhois);

        jPanel7.add(jScrollPane6, java.awt.BorderLayout.CENTER);

        jPanel13.setLayout(new java.awt.GridLayout(1, 2));
        jPanel7.add(jPanel13, java.awt.BorderLayout.PAGE_END);

        jPanel2.add(jPanel7);

        getContentPane().add(jPanel2);

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel4.setLayout(new javax.swing.BoxLayout(jPanel4, javax.swing.BoxLayout.LINE_AXIS));
        jPanel1.add(jPanel4, java.awt.BorderLayout.CENTER);

        jPanel18.setLayout(new javax.swing.BoxLayout(jPanel18, javax.swing.BoxLayout.Y_AXIS));
        jPanel18.add(jPanel3);

        cmbYAxis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbYAxisActionPerformed(evt);
            }
        });
        jPanel16.add(cmbYAxis);

        jPanel18.add(jPanel16);

        jPanel1.add(jPanel18, java.awt.BorderLayout.LINE_START);

        cmbXAxis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbXAxisActionPerformed(evt);
            }
        });
        jPanel17.add(cmbXAxis);

        jPanel1.add(jPanel17, java.awt.BorderLayout.PAGE_END);

        getContentPane().add(jPanel1);

        pack();
    }// </editor-fold>//GEN-END:initComponents
	
	private void initTrees() {
		treService.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
		treDomain.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
		treWhois.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
	}

	private void initPlot() {
        NumberAxis domainAxis = new NumberAxis();
        domainAxis.setAutoRangeIncludesZero(true);
        NumberAxis rangeAxis = new NumberAxis();
        rangeAxis.setAutoRangeIncludesZero(true);
        mPlot = new FastScatterPlot(new float[2][0], domainAxis, rangeAxis);
        mPlot.setSelectionListener(this);
        
        JFreeChart chart = new JFreeChart(mPlot);
        
        // force aliasing of the rendered content..
        chart.getRenderingHints().put(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

        ChartPanel plotPanel = new ChartPanel(chart, true);
        plotPanel.setDomainZoomable(true);
        plotPanel.setRangeZoomable(true);
        plotPanel.setMinimumDrawHeight(10);
        plotPanel.setMaximumDrawHeight(2000);
        plotPanel.setMinimumDrawWidth(20);
        plotPanel.setMaximumDrawWidth(2000);
        jPanel4.add(plotPanel);
	}

    private void cmbYAxisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbYAxisActionPerformed
        updateAxes();
    }//GEN-LAST:event_cmbYAxisActionPerformed

    private void cmbXAxisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbXAxisActionPerformed
    	updateAxes();
    }//GEN-LAST:event_cmbXAxisActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cmbXAxis;
    private javax.swing.JComboBox<String> cmbYAxis;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler3;
    private javax.swing.Box.Filler filler4;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JLabel lbl0;
    private javax.swing.JLabel lbl1;
    private javax.swing.JLabel lblTotal;
    private javax.swing.JLabel lblUnlabeled;
    private javax.swing.JTree treDomain;
    private javax.swing.JTree treService;
    private javax.swing.JTree treWhois;
    // End of variables declaration//GEN-END:variables
	
	public void setDataSelectionListener(DataSelectionListener a) {
		mDataSelectionListener = a;
		
	}

	public void addFilterListener(TreeSelectionListener a) {
		treService.addTreeSelectionListener(a);
		treDomain.addTreeSelectionListener(a);
		treWhois.addTreeSelectionListener(a);
	}

	public void loadFilters(DefaultTreeModel serviceModel, DefaultTreeModel domainModel, DefaultTreeModel whoisModel) {
		treService.setModel(serviceModel);
		treDomain.setModel(domainModel);
		treWhois.setModel(whoisModel);
	}

	public String getSelectedService() {
		return getSelectedTreePath(treService);
	}

	public String getSelectedDomain() {
		return getSelectedTreePath(treDomain);
	}

	public String getSelectedWhois() {
		return getSelectedTreePath(treWhois);
	}

	private String getSelectedTreePath(JTree tree) {
		TreePath path = tree.getSelectionPath();
		if (path == null) return PlotData.TREE_ROOT_NAME;

		return (String) ((TreeNode) path.getLastPathComponent()).getUserObject();
	}

	public void setTotalIPs(int size) {
		lblTotal.setText(String.valueOf(size));
	}

	public void setAxes(List<String> attributes, int initX, int initY) {
		for (String a : attributes) {
			cmbXAxis.addItem(a);
			cmbYAxis.addItem(a);
		}
		
		cmbXAxis.setSelectedIndex(initX);
		cmbYAxis.setSelectedIndex(initY);
	}

	private void updateAxes() {
		if (mCurrentRecords == null) return;
		
		int xIndex = cmbXAxis.getSelectedIndex();
		int yIndex = cmbYAxis.getSelectedIndex();
		
		float[][] data = new float[2][];
		data[0] = mCurrentRecords[xIndex];
		data[1] = mCurrentRecords[yIndex];
		
		mPlot.setData(data);
	}

	public void updatePlot(List<String> ips, float[][] records) {
		mCurrentIPs = ips;
		mCurrentRecords = records;
		updateAxes();
	}

	@Override
	public void select(List<Integer> indexes) {
//		System.out.println("Selected: " + indexes);
		
		if (mDataSelectionListener == null) return;
		
		List<String> data = CUtil.makeList();
		for (int i : indexes) {
			data.add(mCurrentIPs.get(i));
		}
		mDataSelectionListener.selectData(data);
	}

}

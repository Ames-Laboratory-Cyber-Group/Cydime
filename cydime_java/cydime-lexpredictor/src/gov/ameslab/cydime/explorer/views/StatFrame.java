/*
 * Copyright (c) 2014 Iowa State University
 * All rights reserved.
 * 
 * Copyright 2014.  Iowa State University.  This software was produced under U.S.
 * Government contract DE-AC02-07CH11358 for The Ames Laboratory, which is 
 * operated by Iowa State University for the U.S. Department of Energy.  The U.S.
 * Government has the rights to use, reproduce, and distribute this software.
 * NEITHER THE GOVERNMENT NOR IOWA STATE UNIVERSITY MAKES ANY WARRANTY, EXPRESS
 * OR IMPLIED, OR ASSUMES ANY LIABILITY FOR THE USE OF THIS SOFTWARE.  If 
 * software is modified to produce derivative works, such modified software 
 * should be clearly marked, so as not to confuse it with the version available
 * from The Ames Laboratory.  Additionally, redistribution and use in source and
 * binary forms, with or without modification, are permitted provided that the 
 * following conditions are met:
 * 
 * 1.  Redistribution of source code must retain the above copyright notice, this
 * list of conditions, and the following disclaimer.
 * 2.  Redistribution in binary form must reproduce the above copyright notice, 
 * this list of conditions, and the following disclaimer in the documentation 
 * and/or other materials provided with distribution.
 * 3.  Neither the name of Iowa State University, The Ames Laboratory, the
 * U.S. Government, nor the names of its contributors may be used to endorse or
 * promote products derived from this software without specific prior written
 * permission
 * 
 * THIS SOFTWARE IS PROVIDED BY IOWA STATE UNIVERSITY AND CONTRIBUTORS "AS IS",
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL IOWA STATE UNIVERSITY OF CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITRY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE. 
 */

package gov.ameslab.cydime.explorer.views;

import gov.ameslab.cydime.util.CUtil;
import gov.ameslab.cydime.util.HistogramLong;
import gov.ameslab.cydime.util.Range;
import gov.ameslab.cydime.util.views.CompactNumberCellRenderer;
import gov.ameslab.cydime.util.views.PercentageCellRenderer;
import info.monitorenter.gui.chart.Chart2D;
import info.monitorenter.gui.chart.IAxis.AxisTitle;
import info.monitorenter.gui.chart.ITrace2D;
import info.monitorenter.gui.chart.labelformatters.LabelFormatterAutoUnits;
import info.monitorenter.gui.chart.labelformatters.LabelFormatterDate;
import info.monitorenter.gui.chart.traces.Trace2DSimple;
import info.monitorenter.gui.util.ColorIterator;

import java.awt.Color;
import java.awt.event.ActionListener;
import java.text.SimpleDateFormat;
import java.util.Collections;
import java.util.List;
import java.util.Map;

import javax.swing.JTable;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

/**
 * MVC View for the summary statistics tables.
 *
 * @author Harris Lin (harris.lin.nz at gmail.com)
 */
public class StatFrame extends javax.swing.JFrame {
    
	private static final ColorIterator Colors = new ColorIterator();
    private static final SimpleDateFormat DateFormat = new SimpleDateFormat("MM/dd:HH");
    
    private Range mExtRange;
    private Range mIntRange;
    
    /**
     * Creates new form Frame
     */
    public StatFrame() {
        initComponents();
        initTable();
        initChart();
    }

	/**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(20, 0), new java.awt.Dimension(10, 32767));
        butFilterExtToInt = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jSplitPane3 = new javax.swing.JSplitPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblExt = new javax.swing.JTable();
        chtExt = new info.monitorenter.gui.chart.Chart2D();
        jPanel11 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        filler7 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(20, 0), new java.awt.Dimension(10, 32767));
        butFilterIntToExt = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jSplitPane2 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblInt = new javax.swing.JTable();
        chtInt = new info.monitorenter.gui.chart.Chart2D();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("DWL Explorer");
        setPreferredSize(new java.awt.Dimension(1100, 900));
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.PAGE_AXIS));

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel2.setText("External IPs");
        jPanel3.add(jLabel2);
        jPanel3.add(filler2);

        butFilterExtToInt.setText("Filter Down");
        jPanel3.add(butFilterExtToInt);

        getContentPane().add(jPanel3);

        jPanel4.setLayout(new javax.swing.BoxLayout(jPanel4, javax.swing.BoxLayout.LINE_AXIS));

        jSplitPane3.setDividerLocation(250);
        jSplitPane3.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        tblExt.setAutoCreateRowSorter(true);
        tblExt.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Label", "Predicted", "IP", "Semantic Score", "Strength Score", "Top Service", "Domain", "Whois", "Country", "Records", "Bytes", "Peers", "Src Ports", "Dest Ports", "Daily Regularity", "Weekly Regularity", "Access Hours", "Access Days", "Workhour Ratio"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Double.class, java.lang.Double.class, java.lang.String.class, java.lang.Double.class, java.lang.Double.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Long.class, java.lang.Long.class, java.lang.Long.class, java.lang.Long.class, java.lang.Long.class, java.lang.Double.class, java.lang.Double.class, java.lang.Long.class, java.lang.Long.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblExt.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tblExt.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(tblExt);
        tblExt.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tblExt.getColumnModel().getColumn(0).setPreferredWidth(40);
        tblExt.getColumnModel().getColumn(1).setPreferredWidth(40);
        tblExt.getColumnModel().getColumn(2).setPreferredWidth(150);
        tblExt.getColumnModel().getColumn(6).setPreferredWidth(300);
        tblExt.getColumnModel().getColumn(7).setPreferredWidth(200);

        jSplitPane3.setTopComponent(jScrollPane3);
        jSplitPane3.setRightComponent(chtExt);

        jPanel4.add(jSplitPane3);

        getContentPane().add(jPanel4);

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel1.setText("Internal IPs");
        jPanel11.add(jLabel1);
        jPanel11.add(filler7);

        butFilterIntToExt.setText("Filter Up");
        jPanel11.add(butFilterIntToExt);

        getContentPane().add(jPanel11);

        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.LINE_AXIS));

        jSplitPane2.setDividerLocation(250);
        jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        tblInt.setAutoCreateRowSorter(true);
        tblInt.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "IP", "Records", "Bytes", "Peers", "Src Ports", "Dest Ports", "Daily Regularity", "Weekly Regularity", "Access Hours", "Access Days", "Workhour Ratio"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Long.class, java.lang.Long.class, java.lang.Long.class, java.lang.Long.class, java.lang.Long.class, java.lang.Double.class, java.lang.Double.class, java.lang.Long.class, java.lang.Long.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblInt.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tblInt.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tblInt);
        tblInt.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tblInt.getColumnModel().getColumn(0).setPreferredWidth(150);

        jSplitPane2.setTopComponent(jScrollPane1);
        jSplitPane2.setRightComponent(chtInt);

        jPanel1.add(jSplitPane2);

        getContentPane().add(jPanel1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butFilterExtToInt;
    private javax.swing.JButton butFilterIntToExt;
    private info.monitorenter.gui.chart.Chart2D chtExt;
    private info.monitorenter.gui.chart.Chart2D chtInt;
    private javax.swing.Box.Filler filler2;
    private javax.swing.Box.Filler filler7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JSplitPane jSplitPane3;
    private javax.swing.JTable tblExt;
    private javax.swing.JTable tblInt;
    // End of variables declaration//GEN-END:variables

    private void initTable() {
    	tblExt.setDefaultRenderer(Double.class, new PercentageCellRenderer());
    	tblExt.setDefaultRenderer(Long.class, new CompactNumberCellRenderer());
    	tblInt.setDefaultRenderer(Double.class, new PercentageCellRenderer());
    	tblInt.setDefaultRenderer(Long.class, new CompactNumberCellRenderer());
	}

	private void initChart() {
		chtExt.setBackground(Color.black);
		chtExt.setForeground(Color.white);
		chtExt.getAxisX().setAxisTitle(makeAxisTitle("Date:Hour"));
		chtExt.getAxisY().setAxisTitle(makeAxisTitle("Bytes"));
		chtExt.getAxisX().setFormatter(new LabelFormatterDate(DateFormat));
		chtExt.getAxisY().setFormatter(new LabelFormatterAutoUnits());
		chtInt.setBackground(Color.black);
		chtInt.setForeground(Color.white);
		chtInt.getAxisX().setAxisTitle(makeAxisTitle("Date:Hour"));
		chtInt.getAxisY().setAxisTitle(makeAxisTitle("Bytes"));
		chtInt.getAxisX().setFormatter(new LabelFormatterDate(DateFormat));
		chtInt.getAxisY().setFormatter(new LabelFormatterAutoUnits());		
	}

    private AxisTitle makeAxisTitle(String title) {
    	AxisTitle t = new AxisTitle(title);
    	t.setTitleColor(Color.white);
		return t;
	}

	public void addExtIPListSelectionListener(ListSelectionListener a) {
        tblExt.getSelectionModel().addListSelectionListener(a);
    }
    
    public void addIntIPListSelectionListener(ListSelectionListener a) {
        tblInt.getSelectionModel().addListSelectionListener(a);
    }
    
    public void addFilterExtIntActionPerformedListener(ActionListener a) {
    	butFilterExtToInt.addActionListener(a);
	}
    
    public void addFilterIntExtActionPerformedListener(ActionListener a) {
    	butFilterIntToExt.addActionListener(a);
	}
    
    public void updateExtIPRecords(List<Object[]> ipRecords) {
    	updateIPRecords(ipRecords, tblExt);
    }

	public void updateIntIPRecords(List<Object[]> ipRecords) {
		updateIPRecords(ipRecords, tblInt);
    }
    
    private void updateIPRecords(List<Object[]> ipRecords, JTable tbl) {
    	DefaultTableModel model = (DefaultTableModel) tbl.getModel();
        model.setRowCount(0);
        for (Object[] record : ipRecords) {
            model.addRow(record);
        }
        
        if (!ipRecords.isEmpty()) {
        	tbl.changeSelection(0, 0, false, false);
        }
    }

	public void setExtTimeRange(Range range) {
		mExtRange = range;
	}
	
	public void setIntTimeRange(Range range) {
		mIntRange = range;
	}
	
	public List<String> getSelectedExtIPs() {
		return getSelectedIPs(tblExt, 2);
	}
	
	public List<String> getSelectedIntIPs() {
		return getSelectedIPs(tblInt, 0);
	}

	private static List<String> getSelectedIPs(JTable tbl, int ipIndex) {
		List<String> ips = CUtil.makeList();
		int[] selectedRows = tbl.getSelectedRows();
		for (int i = 0; i < selectedRows.length; i++) {
			String ip = (String) tbl.getValueAt(selectedRows[i], ipIndex);
			ips.add(ip);
		}
		return ips;
	}

	public void updateExtTimeseries(Map<String, HistogramLong<Long>> servTimeseries) {
        updateTimeseries(servTimeseries, chtExt, mExtRange);
    }

	public void updateIntTimeseries(Map<String, HistogramLong<Long>> servTimeseries) {
		updateTimeseries(servTimeseries, chtInt, mIntRange);
	}
	
	private static void updateTimeseries(Map<String, HistogramLong<Long>> servTimeseries, Chart2D cht, Range range) {
    	Map<String, Double> servSum = CUtil.makeMap();
        for (Map.Entry<String, HistogramLong<Long>> entry : servTimeseries.entrySet()) {
            servSum.put(entry.getKey(), (double) entry.getValue().getSum());
        }
        
        List<String> sortedServ = CUtil.getSortedKeysByValue(servSum);
        Collections.reverse(sortedServ);

        cht.removeAllTraces();
        Colors.reset();
        Colors.setSteps(servTimeseries.size());
        
        for (String serv : sortedServ) {
            HistogramLong<Long> points = servTimeseries.get(serv);
            ITrace2D trace = new Trace2DSimple(serv);
            trace.setColor(Colors.next());
            // Add the trace to the chart. This has to be done before adding points (deadlock prevention): 
            cht.addTrace(trace);
            for (long t = (long) range.getLower(); t <= range.getUpper(); t += 3600) {
    			trace.addPoint(t * 1000, points.get(t));
            }
        }
	}

    public void clearExtTimeseries() {
		chtExt.removeAllTraces();
	}

	public void clearIntTimeseries() {
		chtInt.removeAllTraces();
	}

}
